set1.txt,v
83 2,v
123,v
ApaarHemantLuckyPranjal Thakral,v
Apaar Ayush RajputDeepakHemant,v
file1.txt,v
test1,v
nameserver 192.168.0.75,V
|1|wfquG8Q2ZU89bcitM/AWZqrsck0=|iqsz5SIVS5mg+MLbs6emfLaB4zo= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHn62xbN17yy3GfScd7AIK2qty2/jD+GPMgqEmQXOOf/0NTfniXyXhLY2Hql3QIJNfK41sBjyRmlH5c1uecnnp0=,v
|1|wfquG8Q2ZU89bcitM/AWZqrsck0=|iqsz5SIVS5mg+MLbs6emfLaB4zo= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHn62xbN17yy3GfScd7AIK2qty2/jD+GPMgqEmQXOOf/0NTfniXyXhLY2Hql3QIJNfK41sBjyRmlH5c1uecnnp0=,V
|1|+LqP0U61KapfPzVtmtoSSCji3tU=|1rMbAElFg9V7P6D+iD8Nul1e5TA= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOLPn3TZ+lKdoZgjcR+RLY1hUeRqsyrN4uPIcaiTsB6MfCxp2KPVBRB2B8i22fTMyXzdK7vhP1LHCSa5xRCNLsM=,v
|1|+LqP0U61KapfPzVtmtoSSCji3tU=|1rMbAElFg9V7P6D+iD8Nul1e5TA= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOLPn3TZ+lKdoZgjcR+RLY1hUeRqsyrN4uPIcaiTsB6MfCxp2KPVBRB2B8i22fTMyXzdK7vhP1LHCSa5xRCNLsM=,V
/home/vadiraj/.ssh/known_hosts:328,v
/tmp/4,v
[root@BACKUPSERVER New folder (2) (copy)]# for i in $(cat C.txt); do grep -q $i INB_30_28Feb-2222.csv && echo present:$i || echo notpresent:$i ; done,V
[root@BACKUPSERVER New folder (2) (copy)]# ,V
[root@BACKUPSERVER New folder (2) (copy)]# for i in $(cat C.txt); do grep -q $i INB_30_28Feb-2222.csv && echo present:$i || echo notpresent:$i ; donepresent:d6aaeb94-0f2b-455e-b3bd-ad53b56d846anotpresent:52d97b9a-ece5-4509-8e01-473a41b80fefpresent:acaface9-e064-4234-939d-438127544479present:46d1b7d7-c1b1-4ffe-a1ba-51489dba46ddpresent:11b9ff72-b988-4a3a-aec1-1704382ceac2present:40c7ec5f-f3a5-4093-ac05-fbf0b45611aapresent:87f8b052-27ab-4c0c-aee6-c71f6cba6262present:9462eaab-c811-4b16-be9e-74859836d108present:83f38177-580c-4428-9895-fe3a474985dfpresent:6c0f0fc3-fad9-48d2-aca3-de81fc0dad8fpresent:6c0f0fc3-fad9-48d2-aca3-de81fc0dad8fpresent:6c0f0fc3-fad9-48d2-aca3-de81fc0dad8fpresent:fc0cc33c-a098-49d3-a6cb-707f1bb67470present:c7a44266-d09f-444c-9967-541b8b60533anotpresent:2101ba0f-b9f3-483a-b4f1-2f461a3ef6ffpresent:de19ad3f-3397-4b74-9e03-8af1cb171404present:6809e5f3-5b2f-4fd6-aa40-eeb173d6bac0present:20b475e7-d488-4d2c-b6c0-681201fca12bnotpresent:3f482e09-1db1-494d-b900-c10615cc7a78notpresent:32da9120-aafb-4c0a-bcfa-92cf7edf81f7present:0000f0e0-f2ae-415b-89d7-2552af5ac6bbpresent:194de5ff-8579-409a-bcf2-4bf45b95b48epresent:08d9d21a-029c-47f0-a923-cca312fb16bbpresent:6c0f0fc3-fad9-48d2-aca3-de81fc0dad8fpresent:40c7ec5f-f3a5-4093-ac05-fbf0b45611aapresent:e98de697-2326-48f9-89ab-0ea7af7ebe39present:6c0f0fc3-fad9-48d2-aca3-de81fc0dad8fpresent:ad3bafa8-461b-4630-8b1c-3896c2eee620present:2e300ad2-252d-49b4-97ba-555bcf9b4c66present:11b9ff72-b988-4a3a-aec1-1704382ceac2present:e2e7e3a7-bf13-45a4-b07d-49fcde3e9257present:92cec398-46a7-4c2d-95da-8d558f111092present:082221f0-3e75-41e0-94e2-9e9c38671f01notpresent:448c371a-d436-4e79-ad68-bf022c7fee17present:7c7c2878-6561-474e-ba0b-e13391cbe9f1present:c7a44266-d09f-444c-9967-541b8b60533apresent:6c0f0fc3-fad9-48d2-aca3-de81fc0dad8fpresent:e1462172-1220-4c75-a342-e9fa037131f4present:86dc3ccb-7ea1-4a54-9826-2a32e64d11d3present:6c4adfcc-94dd-4731-8c49-b15dde18760fpresent:6c0f0fc3-fad9-48d2-aca3-de81fc0dad8fpresent:11b9ff72-b988-4a3a-aec1-1704382ceac2present:5fcb0f1d-df46-4dd9-9854-e14878e9c5ecpresent:e2e7e3a7-bf13-45a4-b07d-49fcde3e9257notpresent:448c371a-d436-4e79-ad68-bf022c7fee17notpresent:b99d1652-0557-4471-b75a-c0d6dd009009present:edf26e1e-8c5d-4f2e-872b-26fe8e63c953present:3d745a0b-ad84-4270-8b4f-2e8b88a11b14present:5c2e36d2-9226-48e5-bf74-0204a8cee17cpresent:aa130735-e13f-4680-adbd-025436f204a1present:d6119173-c13c-4a74-8e95-abff365046d5present:c9e6d234-2b9f-4a00-9964-0be5907bcbb2present:edf26e1e-8c5d-4f2e-872b-26fe8e63c953present:d919c93c-0f06-4433-b9d3-9ad128fe5f99present:7459b498-722e-4835-adc0-c1a50605bdcdnotpresent:01bbc430-7626-4202-829d-22b404510da3present:ebacf29d-1b7c-4f8a-8cfa-4d46ef7e53edpresent:821bdae0-b02b-4bb0-be73-40a8766304dapresent:db7c954f-20fe-458f-a2bb-169554152f0bpresent:ed17ab7e-4fe0-4f9d-a61f-54140b4d2604present:52cc0afc-bba4-4093-9c30-97d536c5eb7dpresent:0665e52e-77aa-4e76-a1b6-5f7dda3db6fbpresent:418661fb-a520-43f1-8416-55dbee7e5ae3present:ee3414db-eab7-41e4-800a-aecb2f3623c1present:fd91f597-c9e1-488b-b29f-6583d9b1d4depresent:0665e52e-77aa-4e76-a1b6-5f7dda3db6fbnotpresent:4d51fd84-b3a3-4295-87f6-0b7a23d37b2cpresent:f53317bd-6b0a-4ee9-89c2-9b1841d76be2present:7a0c0cc0-2efb-435e-b887-4c369b05f21fpresent:c9e6d234-2b9f-4a00-9964-0be5907bcbb2present:db7c954f-20fe-458f-a2bb-169554152f0bpresent:52cc0afc-bba4-4093-9c30-97d536c5eb7dpresent:3d745a0b-ad84-4270-8b4f-2e8b88a11b14present:ee3414db-eab7-41e4-800a-aecb2f3623c1present:37617a03-9942-4ac1-8e08-73b5309d1083present:940780d6-01ed-4ad1-a5ef-7c30a28f0fedpresent:821bdae0-b02b-4bb0-be73-40a8766304dapresent:b7ab6e6a-0f89-4c88-928f-96cd4c282856present:2726ccb5-5431-418e-bc3a-8bab77dafcdcpresent:6bef95eb-cc84-4eeb-b2ff-7512a014ce25present:585028cb-beb1-4619-bc47-f81a09c54940present:0492f9df-14f1-4776-a214-40050df0ea68present:28440776-5900-4c65-afd7-5e02d253e07anotpresent:9ac67785-0e29-402f-a800-9f8454cf8ef6present:c73ebebb-30a0-4d70-901d-8a4bdbec23e0present:efcc85de-3619-48b8-9053-ed2ba0cf63ebpresent:a00b0d5d-8017-4279-b0f5-dc245c7a68c0present:c71dbb7c-50a3-4bdb-b5e5-3962483ed18apresent:d5e97db7-ccea-495c-a58f-0108ceaf4aecpresent:fb3b5a48-270b-4ef2-8bdb-03796cfec662present:60e48a61-2ce4-4d1a-bcc6-0b62cd81d7fdpresent:058b0fcf-1a0f-4d69-9e1f-4a8f661c4f7dpresent:3fb8580b-c57c-4d1f-9691-1522ae7b2868present:3fb8580b-c57c-4d1f-9691-1522ae7b2868present:6fdfdb0d-efc9-4875-a6ba-06175c146825present:96af0e06-709f-4864-9bb5-244fba513aednotpresent:c4925a36-abaa-4238-bdca-c7e098bb9ca9present:f51dce0c-dc71-443e-948b-be634256e56bpresent:03c03f8a-5725-49dd-9c65-e474ff0a937bpresent:a218f73d-a26a-4567-966b-3e2a56d2ffc6present:1b1907b0-5add-456b-8e7c-3e3b8dae40e0present:bec5be4a-136f-455b-b513-4398f24e51a9present:1b1907b0-5add-456b-8e7c-3e3b8dae40e0present:3fb8580b-c57c-4d1f-9691-1522ae7b2868present:cb05a458-52fa-4044-b803-75bdfcbe3811notpresent:75ff8aaf-b9a3-46e6-b8e6-af0f4fa15d22present:d2fa8cf8-c78f-48ab-a7a8-bdc82810d934present:77f8ad5d-aa85-4ddf-a876-2eeaae989f4epresent:7828ac5e-795d-4907-88e2-ae96f6c2d23epresent:65bea0d5-9d13-4bf1-8a23-f59b13e3b3d1present:0a1a0b9d-3b89-4197-9949-ca6ddb98445fpresent:916cf219-83e7-4aac-aae1-e4f6d36ebbc5present:0ffb5e77-f893-47e2-96b1-efd1ee74676apresent:5dcecd87-08b5-4878-9af6-d34e86514cf6present:a6a24101-4b90-41a8-8f5c-1933956293f8present:f1756709-5736-4a22-ab5b-9941d63826c7present:3fb8580b-c57c-4d1f-9691-1522ae7b2868present:0ffb5e77-f893-47e2-96b1-efd1ee74676apresent:8b8de030-cd1a-4442-9053-875e4311eb9cpresent:78ae96b2-9a25-47d1-a699-0675ba992709present:5339feb8-a856-4c74-aaf0-a8105175926apresent:2cb86ce8-a8c0-47fd-976f-286fd1f610capresent:4b1f0ec4-63b1-43a7-aa85-be424778b297present:585028cb-beb1-4619-bc47-f81a09c54940present:eac7bad0-0e2d-490b-b6e5-f7e5d9621079present:4fe20347-c97f-4b9f-8e05-abc088eaec4dpresent:a36af0fa-6dff-4b9d-b9e9-7782367589ccpresent:63969137-b923-4657-9f10-d929b0975114present:12b8e6ec-8b29-4895-b048-85a91604397fpresent:07384c7c-6b8d-4387-af93-b54f19ff7515present:1224f8b5-bb7c-4a7b-aeb7-74a3114a1304present:5339feb8-a856-4c74-aaf0-a8105175926apresent:60c5be8e-0fed-4380-8372-82474ce38b73present:d233cf41-720c-4d2b-8d06-778d09e10278present:60c5be8e-0fed-4380-8372-82474ce38b73present:bb1c4213-0c3c-4d11-af97-67545fa2f877present:585028cb-beb1-4619-bc47-f81a09c54940present:585028cb-beb1-4619-bc47-f81a09c54940present:3139ffa9-4586-4415-b0d6-7caf90c35814notpresent:1fa4bc9a-9608-432d-a0fb-2ea021349a04present:da3af466-db51-4c70-9d19-8e0a6dc64094present:4307de96-fca8-47f4-8baa-c6f38037bab3present:006dd4f2-c915-44bb-843e-e4d71ed84d5cpresent:2e83d4b4-fa6f-4eb1-aaaa-7c9c7c80a9a0present:cb63ac0f-d4a1-4e69-86ed-85bb3fe3b8abpresent:585028cb-beb1-4619-bc47-f81a09c54940present:8b8de030-cd1a-4442-9053-875e4311eb9cpresent:60e48a61-2ce4-4d1a-bcc6-0b62cd81d7fdpresent:f9fd7315-5222-4453-9a38-5c987d514f2bpresent:a00b0d5d-8017-4279-b0f5-dc245c7a68c0present:945575bc-68da-4d56-84e5-b9d6c18aece6present:fb3b5a48-270b-4ef2-8bdb-03796cfec662present:4b1f0ec4-63b1-43a7-aa85-be424778b297present:585028cb-beb1-4619-bc47-f81a09c54940present:78922dec-bd6f-47a2-bbad-84224f8ec1dcpresent:40854695-a822-4633-a5dd-01e4f797f3f8present:516b261a-285e-4cd1-a7e0-c343e7ecbf1epresent:62e5a1ff-46c1-4349-ba3a-402be834cc81present:fc51cfba-51db-4b77-991d-0795eeae7f3fpresent:b2ea6bdf-95ef-44e5-921c-ee9479ddc1f0present:594d6b84-27c7-4bd6-8039-6e081750e88bpresent:d4dbddbb-d8f3-488a-a178-386d0bbe495apresent:2e4aadc7-d7e9-49bc-a733-3c41f498978bnotpresent:dc8e2faf-1b75-4961-944f-421b8dea8f6bpresent:22466d05-0dda-468d-ab09-5ae4a3f4bfa9notpresent:fbd1df70-f9a5-4f42-ad3c-10b7823aab61present:d4dbddbb-d8f3-488a-a178-386d0bbe495apresent:eb4b80d5-3c51-41cd-9882-dd9359212a93notpresent:24f36b4f-4916-4b2c-a119-168ee5c78d24present:48033205-a249-4738-8407-783f16380448present:85dbf8b5-d943-4ea1-b519-2b9bae77dbcdnotpresent:62e3d0fe-4358-4bd4-b850-fb089679d5dfpresent:b57336f8-4c86-4aa1-9a45-b25f3e0cb3b2present:f249daf6-ace0-4be8-867a-824dcc8989a4present:c824a451-0232-43c6-a4a0-d6a5956fe360present:5206998e-b761-4d25-8950-6c4cee22e9c2notpresent:62e3d0fe-4358-4bd4-b850-fb089679d5dfpresent:8f1a1f85-f892-4bc1-9ad6-cc40d94d3122present:ac987d0d-881f-452d-b2d7-f0200984f7c9present:840cfe8c-97d4-4424-aa95-1760860fabe9present:b1378e58-81c4-4f0e-afb4-389a0f1daef0present:7a797eb2-134a-4027-9544-a478e93379f0present:c580f393-2037-4e06-8c30-07b0f7a0ee7dpresent:2c1db8f5-5086-47a4-8653-43ddf0aa9ff5present:994320a3-2263-400a-987c-7e15cd7467aapresent:3234634c-3d0f-4f5e-a265-7959d91b1d97present:85364088-89ee-4929-8a00-8dcd40568027notpresent:848009f0-32c5-4fa7-abab-851338a0d2c5present:5de9a70e-0c59-455e-968c-9add3c80c553present:8cd397da-f494-4952-97f0-3c995530323fnotpresent:848009f0-32c5-4fa7-abab-851338a0d2c5present:cbd87ef8-cec3-4fb2-8be8-f6a43ca72c43notpresent:62e3d0fe-4358-4bd4-b850-fb089679d5dfpresent:ebf36fbf-efe4-4159-af2e-8698292571bfpresent:4309f741-8da8-4cd2-9800-9765792881d4present:889ee9af-8b59-40a4-a88d-baaeddef5a04present:85364088-89ee-4929-8a00-8dcd40568027present:ed4b800c-9266-4e58-a891-d73ac44b52d2present:ac987d0d-881f-452d-b2d7-f0200984f7c9present:e24391c8-4776-407c-8c02-997232dbbb45notpresent:848009f0-32c5-4fa7-abab-851338a0d2c5present:75931814-28cf-4093-9491-be02fa5400f4present:ecd0c871-3abf-4dd1-b30f-cd1025c773abpresent:98504a44-9d1c-45e8-98f4-0cec6bb5d6d1[root@BACKUPSERVER New folder (2) (copy)]# ,v
adp-35.i-93cce71e.revx.euir1.atomex.net,NewSitesDataSync,137,v
vim-nerdtree-tabs,v
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree,v
,V
if has('gui_running')  set background=dark  colorscheme solarizedelse  colorscheme zenburnendif,v
altercation/vim-colors-solarized',v
Bundle 'jnurmine/Zenburn',V
jnurmine/Zenburn,v
Bundle 'nvie/vim-flake8',V
vim-colors-solarized,v
let python_highlight_all=1syntax on,v
Bundle 'vim-scripts/indentpython.vim',v
Bundle 'vim-scripts/indentpython.vim',V
syntastic,v
Bundle 'tmhedberg/SimpylFold',v
Bundle 'tmhedberg/SimpylFold',V
Plugin 'tmhedberg/SimpylFold',v
" Folding {{{    " set foldenable " Turn on folding    set foldmethod=marker " Fold on the marker    " set foldlevel=100 " Don't autofold anything (but I can still fold manually)    set foldopen=block,hor,mark,percent,quickfix,tag " what movements open folds    function! MyFoldText() " {{{      let line = getline(v:foldstart)      let nucolwidth = &fdc + &number * &numberwidth      let windowwidth = winwidth(0) - nucolwidth - 3      let foldedlinecount = v:foldend - v:foldstart      " expand tabs into spaces      let onetab = strpart('          ', 0, &tabstop)      let line = substitute(line, '\t', onetab, 'g')      let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))      let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 6      return line . '  …' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '    endfunction " }}}    set foldtext=MyFoldText()" }}},V
"split navigationsnnoremap <C-J> <C-W><C-J>nnoremap <C-K> <C-W><C-K>nnoremap <C-L> <C-W><C-L>nnoremap <C-H> <C-W><C-H>,v
nnoremap,v
C-W,v
Quick setup — if you’ve done this kind of thing beforeorWe recommend every repository include a README, LICENSE, and .gitignore.…or create a new repository on the command lineecho "# dotvim" >> README.mdgit initgit add README.mdgit commit -m "first commit"git remote add origin https://github.com/vadirajks/dotvim.gitgit push -u origin master…or push an existing repository from the command linegit remote add origin https://github.com/vadirajks/dotvim.gitgit push -u origin master…or import code from another repositoryYou can initialize this repository with code from a Subversion, Mercurial, or TFS project.,v
    git://github.com/vadirajks/dotvim.git,v
    git://github.com/vadirajks/dotvim.git,V
https://github.com/vadirajks/dotvim.git,v
" Paste instructions for symlinking .vimrc/.gvimrc,V
Installation:,v
ln -s ~/.vim/vimrc ~/.vimrcln -s ~/.vim/gvimrc ~/.gvimrc,v
" Paste instructions for symlinking .vimrc/.gvimrc,v
vim README,v
,v
dsds,V
dfdfdf,V
Formatting/Layout,v
" Language specific / filetype autocommands {{{  " CSS, SCSS {{{    augroup FTCss      au!      au BufRead,BufNewFile *.scss.erb set ft=scss      autocmd FileType css,scss  silent! setlocal omnifunc=csscomplete#CompleteCSS      autocmd FileType css,scss  setlocal iskeyword+=-      autocmd FileType css,scss   setlocal ai et sta sw=2 sts=2      " Use <leader>S to sort properties.      au FileType css,scss nnoremap <buffer> <leader>S ?{<CR>jV/\v^\s*\}?$<CR>k:sort<CR>:noh<CR>      " Make {<cr> insert a pair of brackets in such a way that the cursor is      " correctly positioned inside of them AND the following code doesn't get unfolded.      au FileType css,scss inoremap <buffer> {<cr> {}<left><cr>.<cr><esc>k==A<bs>    augroup END  " }}}  " HTML, XML {{{    augroup FTHtml      au!      "au BufRead,BufNewFile *.html.erb set ft=html.erb      autocmd FileType html,xhtml,wml,cf,mako,haml      setlocal ai et sta sw=2 sts=2      autocmd FileType xml,xsd,xslt           setlocal ai et sta sw=2 sts=2 ts=2      autocmd FileType html setlocal iskeyword+=~    augroup END  " }}}  " JavaScript {{{  autocmd FileType javascript    \ :setl omnifunc=jscomplete#CompleteJS    augroup FTJavascript      au!      autocmd FileType javascript setlocal ai et sta sw=2 sts=2 ts=2 cin isk+=$      " https://gist.github.com/725689      au BufNewFile,BufRead *.js set makeprg=gjslint\ %      au BufNewFile,BufRead *.js set errorformat=%-P-----\ FILE\ \ :\ \ %f\ -----,Line\ %l\\,\ E:%n:\ %m,%-Q,%-GFound\ %s,%-GSome\ %s,%-Gfixjsstyle%s,%-Gscript\ can\ %s,%-G    augroup END  " }}}  " TEX {{{    augroup FTTex      au!      autocmd FileType tex                    setlocal fo+=t " autowrap text      autocmd FileType tex  silent! compiler tex | setlocal makeprg=latex\ -interaction=nonstopmode\ % formatoptions+=l      autocmd FileType context set spell spelllang=en_US    augroup END  " }}}  " Ruby {{{    augroup FTRuby      au!      autocmd FileType ruby silent! compiler ruby | setlocal tw=79 isfname+=: makeprg=rake comments=:#\  | let &includeexpr = 'tolower(substitute(substitute('.&includeexpr.',"\\(\\u\\+\\)\\(\\u\\l\\)","\\1_\\2","g"),"\\(\\l\\|\\d\\)\\(\\u\\)","\\1_\\2","g"))'      autocmd FileType eruby,yaml,ruby        setlocal ai et sta sw=2 sts=2      autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete    augroup END  " }}}  " Cucumber {{{    augroup FTCucumber      au!      autocmd FileType cucumber               setlocal ai et sta sw=2 sts=2 ts=2      autocmd FileType cucumber silent! compiler cucumber | imap <buffer><expr> <Tab> pumvisible() ? "\<C-N>" : (CucumberComplete(1,'') >= 0 ? "\<C-X>\<C-O>" : (getline('.') =~ '\S' ? ' ' : "\<C-I>"))      autocmd FileType ruby iabbr $p "([^"]*)"    augroup END    " Cucumber navigation commands    autocmd User Rails Rnavcommand step features/step_definitions -glob=**/* -suffix=_steps.rb    " :Cuc my text (no quotes) -> runs cucumber scenarios containing "my text"    command! -nargs=+ Cuc :!ack --no-heading --no-break <q-args> | cut -d':' -f1,2 | xargs bundle exec cucumber --no-color  " }}}  " Plain text {{{    augroup FTText      au!      autocmd FileType text,txt,mail      setlocal ai com=fb:*,fb:-,n:>      autocmd FileType text,txt setlocal tw=78 linebreak nolist    augroup END  " }}}  " Git {{{    augroup FTGit      au!      autocmd FileType git,gitcommit setlocal foldmethod=syntax foldlevel=1      autocmd FileType gitcommit setlocal spell    augroup END  " }}}  "" Rails {{{  "map <leader>gr :topleft :split config/routes.rb<cr>  "map <leader>gg :topleft 100 :split Gemfile<cr>  "function! ShowRoutes()    "" Requires 'scratch' plugin    ":topleft 100 :split __Routes__    "" Make sure Vim doesn't write __Routes__ as a file    ":set buftype=nofile    "" Delete everything    ":normal 1GdG    "" Put routes output in buffer    ":0r! rake -s routes    "" Size window to number of lines (1 plus rake output length)    ":exec ":normal " . line("$") . "_ "    "" Move cursor to bottom    ":normal 1GG    "" Delete empty trailing line    ":normal dd  "endfunction  "map <leader>gR :call ShowRoutes()<cr>  "function! RunTests(filename)    "" Write the file and run tests for the given filename    ":w    ":silent !echo;echo;echo;echo;echo    "let t:command = ":Dispatch bin/rspec " . a:filename    ":exec t:command  "endfunction  "function! SetTestFile()    "" Set the spec file that tests will be run for.    "let t:grb_test_file=@%  "endfunction  "function! RunTestFile(...)    "if a:0      "let command_suffix = a:1    "else      "let command_suffix = ""    "endif    "" Run the tests for the previously-marked file.    "let in_spec_file = match(expand("%"), '_spec.rb$') != -1    "if in_spec_file      "call SetTestFile()    "elseif !exists("t:grb_test_file")      "return    "end    "call RunTests(t:grb_test_file . command_suffix)  "endfunction  "function! RunNearestTest()    "let spec_line_number = line('.')    "call RunTestFile(":" . spec_line_number)  "endfunction  "" Run this file  "map <leader>t :call RunTestFile()<cr>  "" Run only the example under the cursor  "map <leader>T :call RunNearestTest()<cr>  "" Run all test files  "map <leader>a :call RunTests('spec')<cr>  "" }}}  " CoffeeScript {{{    " au BufWritePost *.coffee silent CoffeeMake! | redraw!    au FileType coffee setl sw=2 sts=2 et    " au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable    " au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab  " }}}  " tComment {{{  " Comment javascript code  map <leader>cj <C-_>a javascript<CR>  map <leader>cc <C-_>a coffee<CR>  " }}}  " HTML {{{    au BufWritePost *.html retab!  " }}}  " Dart {{{    " au BufNewFile,BufReadPost *.dart setl shiftwidth=2 expandtab  " }}}  " HAML {{{    au BufRead,BufNewFile *.hamlc set ft=haml  " }}}  " Markdown {{{    augroup MKD        au!        autocmd FileType mkd setlocal formatoptions=n wrap linebreak nolist spell spelllang=en_us        autocmd FileType mkd setlocal textwidth=0        autocmd FileType mkd setlocal wrapmargin=0    augroup END  " }}}" }}}" Miscelancous autocommands {{{    augroup FTMics      autocmd!      au FocusLost * :wall      " Resize splits when the window is resized      au VimResized * exe "normal! \<c-w>="      autocmd BufReadCmd *.jar call zip#Browse(expand("<amatch>"))      autocmd BufReadPre *.pdf setlocal binary    augroup END    augroup FTCheck      autocmd!      autocmd BufNewFile,BufRead *.pig set filetype=pig syntax=pig      autocmd BufNewFile,BufRead */apache2/[ms]*-*/* set ft=apache      autocmd BufNewFile,BufRead */httpd/[ms]*-*/* set ft=apache      autocmd BufNewFile,BufRead *named.conf*       set ft=named      autocmd BufNewFile,BufRead *.feature,*.story  set ft=cucumber      autocmd BufNewFile,BufRead /etc/udev/*.rules set ft=udev    augroup END    augroup FTOptions      autocmd!      autocmd FileType * if exists("+omnifunc") && &omnifunc == "" | setlocal omnifunc=syntaxcomplete#Complete | endif    augroup END    augroup FTQuickfix      au!      au Filetype qf setlocal colorcolumn=0 nolist nocursorline nowrap    augroup END" }}}" Plugins settings {{{    runtime macros/matchit.vim    " supertab {{{      let g:SuperTabDefaultCompletionType = 'context'      let g:SuperTabContextDefaultCompletionType = '<c-n>'    " }}}    " syntastic {{{    let g:syntastic_auto_loc_list=2    let g:syntastic_enable_signs=1    let g:synastic_quiet_warnings=1    let g:syntastic_python_checkers=['flake8']    " let g:syntastic_html_checkers=['tidy']    " }}}    " YankRing {{{       nnoremap <silent> <F11> :YRShow<CR>       inoremap <silent> <F11> <esc>:YRShow<CR>       let g:yankring_history_dir = '~/.vim'    " }}}    " Rubycomplete {{{        let g:rubycomplete_rails=1        let g:rubycomplete_classes_in_global=1        let g:rubycomplete_buffer_loading=1        let g:rubycomplete_include_object=1        let g:rubycomplete_include_objectspace=1    " }}}    " Gundo {{{      nnoremap <leader>g :GundoToggle<cr>    " }}}    " Fugitive {{{      nnoremap <leader>gs :Gstatus<cr>      nnoremap <leader>gc :Gcommit<cr>      nnoremap <leader>gd :Gdiff<cr>    " }}}    " NERDTree {{{      nnoremap <silent> <F12> :NERDTreeToggle <CR> " F12 toggles file explorer      let g:NERDTreeMinimalUI=1      let g:NERDTreeDirArrows=1      let g:NERTreeHighlightCursorLine=1    "}}}    " Ctrl-P {{{    map <leader>f :CtrlP<cr>    map <leader>b :CtrlPMRU<cr>    map <leader>gv :CtrlP app/views<cr>    map <leader>gc :CtrlP app/controllers<cr>    map <leader>gm :CtrlP app/models<cr>    " }}}    " AngularJS {{{    " }}}    " UltiSnip {{{    let g:UltiSnipsExpandTrigger="<c-j>"    " }}}" }}}" GUI settings {{{  autocmd GUIEnter * set guioptions-=m  autocmd GUIEnter * set guioptions-=T  "autocmd GUIEnter * set gfn=Bitstream\ Vera\ Sans\ Mono\ 10  autocmd GUIEnter * set gfn=Monaco\ for\ Powerline\ 10  let g:Powerline_symbols = 'fancy'  set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim  autocmd GUIEnter * set vb t_vb= " disable visual bell" }}}" Commands {{{function! Run()  let old_makeprg = &makeprg  let cmd = matchstr(getline(1),'^#!\zs[^ ]*')  if exists("b:run_command")    exe b:run_command  elseif cmd != '' && executable(cmd)    wa    let &makeprg = matchstr(getline(1),'^#!\zs.*').' %'    make  elseif &ft == "mail" || &ft == "text" || &ft == "help" || &ft == "gitcommit"    setlocal spell!  elseif exists("b:rails_root") && exists(":Rake")    wa    Rake  elseif &ft == "ruby"    wa    if executable(expand("%:p")) || getline(1) =~ '^#!'      compiler ruby      let &makeprg = "ruby"      make %    elseif expand("%:t") =~ '_test\.rb$'      compiler rubyunit      let &makeprg = "ruby"      make %    elseif expand("%:t") =~ '_spec\.rb$'      compiler ruby      let &makeprg = "bin/rspec "      make %    else      !ruby "%:p"    endif  elseif &ft == "html" || &ft == "xhtml" || &ft == "php" || &ft == "aspvbs" || &ft == "aspperl"    wa    if !exists("b:url")      call OpenURL(expand("%:p"))    else      call OpenURL(b:url)    endif  elseif &ft == "vim"    wa    unlet! g:loaded_{expand("%:t:r")}    return 'source %'  elseif &ft == "sql"    1,$DBExecRangeSQL  elseif expand("%:e") == "tex"    wa    exe "normal :!rubber -f %:r && xdvi %:r >/dev/null 2>/dev/null &\<CR>"  else    wa    if &makeprg =~ "%"      make    else      make %    endif  endif  let &makeprg = old_makeprg  return ""endfunctioncommand! -bar Run :execute Run()" }}}" Statusline {{{  augroup ft_statuslinecolor    au!    au InsertEnter * hi StatusLine ctermfg=196 guifg=#FF3145    au InsertLeave * hi StatusLine ctermfg=130 guifg=#CD5907  augroup END  set statusline=%f    " Path.  set statusline+=%m   " Modified flag.  set statusline+=%r   " Readonly flag.  set statusline+=%w   " Preview window flag.  set statusline+=\    " Space.  set statusline+=%#redbar#                " Highlight the following as a warning.  set statusline+=%{SyntasticStatuslineFlag()} " Syntastic errors.  set statusline+=%*                           " Reset highlighting.  set statusline+=%=   " Right align.  " File format, encoding and type.  Ex: "(unix/utf-8/python)"  set statusline+=(  set statusline+=%{&ff}                        " Format (unix/DOS).  set statusline+=/  set statusline+=%{strlen(&fenc)?&fenc:&enc}   " Encoding (utf-8).  set statusline+=/  set statusline+=%{&ft}                        " Type (python).  set statusline+=)  " Line and column position and counts.  set statusline+=\ (line\ %l\/%L,\ col\ %03c)" }}}" Ack motions {{{" Motions to Ack for things.  Works with pretty much everything, including:""   w, W, e, E, b, B, t*, f*, i*, a*, and custom text objects"" Awesome."" Note: If the text covered by a motion contains a newline it won't work.  Ack" searches line-by-line.nnoremap <silent> \a :set opfunc=<SID>AckMotion<CR>g@xnoremap <silent> \a :<C-U>call <SID>AckMotion(visualmode())<CR>function! s:CopyMotionForType(type)    if a:type ==# 'v'        silent execute "normal! `<" . a:type . "`>y"    elseif a:type ==# 'char'        silent execute "normal! `[v`]y"    endifendfunctionfunction! s:AckMotion(type) abort    let reg_save = @@    call s:CopyMotionForType(a:type)    execute "normal! :Ack! --literal " . shellescape(@@) . "\<cr>"    let @@ = reg_saveendfunction" }}}" Refactorings {{{function! ExtractVariable()  let name = input("Variable name: ")  if name == ''    return  endif  " Enter visual mode (not sure why this is needed since we're already in  " visual mode anyway)  normal! gv  " Replace selected text with the variable name  exec "normal c" . name  " Define the variable on the line above  exec "normal! O" . name . " = "  " Paste the original selected text to be the variable value  normal! $pendfunctionfunction! InlineVariable()  " Copy the variable under the cursor into the 'a' register  :let l:tmp_a = @a  :normal "ayiw  " Delete variable and equals sign  :normal 2daW  " Delete the expression into the 'b' register  :let l:tmp_b = @b  :normal "bd$  " Delete the remnants of the line  :normal dd  " Go to the end of the previous line so we can start our search for the  " usage of the variable to replace. Doing '0' instead of 'k$' doesn't  " work; I'm not sure why.  normal k$  " Find the next occurence of the variable  exec '/\<' . @a . '\>'  " Replace that occurence with the text we yanked  exec ':.s/\<' . @a . '\>/' . @b  :let @a = l:tmp_a  :let @b = l:tmp_bendfunctionvnoremap <leader>rv :call ExtractVariable()<cr>nnoremap <leader>ri :call InlineVariable()<cr>" }}},V
